;;; Part 0: This programming assignment uses memories, so start by
;;; copying and pasting your solution to the previous assignment here.
(encapsulate nil
  (set-state-ok t)
  (program)
  (defun check-expect-fn (left right sexpr state)
    (if (equal left right)
      (mv nil (cw "check-expect succeeded: ~x0~%" sexpr) state)
      (er soft nil "check-expect failed: ~x0
      Expected: ~x1
      Actual:   ~x2" sexpr right left)))
  (defmacro check-expect (&whole sexpr left right)
    `(check-expect-fn ,left ,right (quote ,sexpr) state))
  (logic))

;(add-include-book-dir :teachpacks "/Applications/Proof\ Pad.app/Contents/Resources/Java/acl2/dracula/")
(include-book "doublecheck" :uncertified-okp t :dir :teachpacks)

(include-book "misc/total-order" :dir :system)

;;; Note: We use << instead of < because << works for
;;; symbols (like 'x and 'y), while < only works for
;;; numbers

;;; Also, you should know that (symbolp x) is true if
;;; x is a valid symbol, and (rationalp x) is true if
;;; x is a rational number.  These two predicates are
;;; just like consp (for lists) and natp (for naturals)

;;; This function returns the maximum of its two inputs
(defun max-<< (a b)
   (if (<< a b)
       b
       a))

;;; TODO: Write more unit tests for max-<<, at least 5 total.
(check-expect (max-<< 'a 'b) 'b)
(check-expect (max-<< 'c 'b) 'c)

;;; This function returns the minimum of its two inputs
(defun min-<< (a b)
   (if (<< a b)
       a
       b))

;;; TODO: Write more unit tests for min-<<, at least 5 total.
(check-expect (min-<< 'a 'b) 'a)
(check-expect (min-<< 'c 'b) 'b)

;;; Trees look like lists as in class:
;;; A tree can be:
;;;    1. NIL                    - the empty tree
;;;    2. (key value left right) - where left and right are trees

;;; This function finds the maximum key in a tree
(defun tree-max (tree)
   (if (consp tree)
       (if (consp (third tree))
           (if (consp (fourth tree))
               (max-<< (first tree)
                    (max-<< (tree-max (third tree)) 
                            (tree-max (fourth tree))))
               (max-<< (first tree)
                       (tree-max (third tree))))
           (if (consp (fourth tree))
               (max-<< (first tree)
                       (tree-max (fourth tree)))
               (first tree)))
       'MIN-SYMBOL))

;;; TODO: Write more unit tests for tree-max, at least 5 total.
(check-expect (tree-max '(x 1 nil (z 3 (y 2 nil nil) nil))) 'z)
(check-expect (tree-max '(x z nil (w 3 (y 2 nil nil) nil))) 'y)
(check-expect (tree-max '(y 1 nil (3 3 (y 2 z nil) nil))) 'y)
(check-expect (tree-max '(x 1 nil (2 3 (y 2 nil z) nil))) 'y)
(check-expect (tree-max '(x 1 nil (5 3 (z 2 nil 26) nil))) 'z)

;;; This function finds the minimum key in a tree
(defun tree-min (tree)
   (if (consp tree)
       (if (consp (third tree))
           (if (consp (fourth tree))
               (min-<< (first tree)
                       (min-<< (tree-min (third tree)) 
                               (tree-min (fourth tree))))
               (min-<< (first tree)
                       (tree-min (third tree))))
           (if (consp (fourth tree))
               (min-<< (first tree)
                       (tree-min (fourth tree)))
               (first tree)))
       'MAX-SYMBOL)
   )

;;; TODO: Write more unit tests for tree-min, at least 5 total.
(check-expect (tree-min '(x 1 nil (z 3 (y 2 nil nil) nil))) 'x)
(check-expect (tree-min '(x z nil (w 3 (y 2 nil nil) nil))) 'w)
(check-expect (tree-min '(y 1 nil (3 3 (y 2 z nil) nil))) '3)
(check-expect (tree-min '(a 1 nil (2 3 (y 2 nil z) nil))) '2)
(check-expect (tree-min '(t 1 nil (5 3 (b 2 nil 26) nil))) '5)

;;; This function checks whether the tree is a valid search tree
;;; The conditions are that:
;;;   1.   The tree is NIL, OR
;;;   2.1. The tree is a list with 4 elements (key value left right), AND
;;;   2.2. The key is a valid symbol, AND
;;;   2.3. The value is a rational number, AND
;;;   2.4. The left tree is NIL, OR the max of the left tree is << the key, AND
;;;   2.5. The right tree is NIL, OR the key is << the min of the right, AND
;;;   2.6. The left tree is a valid search tree, AND
;;;   2.7. The right tree is a valid search tree
;;; TODO: Implement this function using the strategy above.
(defun search-treep (tree)
   (if (consp tree)
             (if (equal (len tree) 4)
                (if (symbolp (first tree))
                   (if (rationalp(second tree))
                      (if (or (equal(third tree) nil)(<<(tree-max(third tree)) (first tree)))
                          (if (or (equal(fourth tree) nil)(<<(first tree) (tree-min (fourth tree))))
                        (if(and (search-treep (third tree))(search-treep(fourth tree)))
                                   t
                                nil)
                              nil)
                          nil)
                       nil)
                    nil)
                 nil)
       t))                 
;;; TODO: More unit tests, at least 5 total
(check-expect (search-treep '(x 1 nil (z 3 (y 2 nil nil) nil))) t)
(check-expect (search-treep '(y 1 nil (z 3 (x 2 nil nil) nil))) nil)

;;; TODO: Implement insertion of the key/value pair into the search tree
;;; Hint: The equations for tree-insert were covered in class
(defun tree-insert (key value tree)
  	(if (consp tree) ;if the tree is not empty
 		 (if (= key (first tree))   ;check if the first value in tree is the key
  		 (cons key '(value (third tree) (fourth tree)))  ;If the first value is the key construct a list [key , value, Third(tree), Fourth(tree)
				(if (< key (first tree))    ; if key is not = first key, but if key is less than first in tree 
				  (cons (first tree) '((second tree) (cons key '(value (third tree) (fourth tree))))) ;create tree first second (insert key value third fourth)
					;(if(> key (first tree)); if it is on the other side of the tree
					(cons (first tree) '((second tree)  (third tree)(cons key '(value (fourth tree)))))  ;create tree first second third (insert key value fourth))
					
					))		
(cons key value))  ;Return cons key value if tree is nil	
  )

;;; TODO: More unit tests, at least 5 total
(check-expect (tree-insert 'x 1 nil) '(x 1 nil nil))
(check-expect (tree-insert 'z 3 '(x 1 nil nil)) '(x 1 nil (z 3 nil nil)))
(check-expect (tree-insert 'y 2 '(x 1 nil (z 3 nil nil))) '(x 1 nil (z 3 (y 2 nil nil) nil)))


;;; TODO: Create a tree by inserting the key/value pairs in a list
;;; To make life simpler, insert the first key/value pair last into the tree
;;; Trust me: that makes the recursion simpler.
;;; Look at the unit tests below to see how this should work
(defun search-list-to-tree (l)
  (if (endp l)
      (consp l)
    (tree-insert (car l) (search-list-to-tree (cdr l))))); car returns first pair in a list and cdr returns the second

;;; TODO: More unit tests, at least 5 total
(check-expect (search-list-to-tree '((x 1) (y 2))) 
              '(y 2 (x 1 nil nil) nil))
(check-expect (search-list-to-tree '((b 1) (c 2) (a 3))) 
              '(a 3 nil (c 2 (b 1 nil nil) nil)))

(defun tree-lookup (key tree)
  (if (consp tree)
    (if (equal key (first tree))
      (second tree)
      (if (<< key (first tree))
        (tree-lookup key (third tree))
        (tree-lookup key (fourth tree))))
    0))

(check-expect (tree-lookup 'x '(x 1 nil nil)) 1)
(check-expect (tree-lookup 'y '(x 1 nil nil)) 0)
(check-expect (tree-lookup 'y '(x 1 nil (z 3 (y 2 nil nil) nil))) 2)


;;; END OF RANDOM TREES

;;; Below is the last part of the assignment, so you should 
;;; continue reading carefully.

;;; TODO: Verify using defproperty-program the little theory that:
;;;    * The tree-min of a tree is << the tree-max of the tree
;;; Careful! This property is not true for all trees! It's
;;; only true for non-empty trees when the minimum is not equal
;;; to the maximum
(defproperty-program treemin-<<-treemax
   (tree  :value (random-search-tree))
 (if (and (consp tree) (not (= (min tree) (max tree)))
	 (<< (min tree) (max tree)
	     f
	     )
)
;;; TODO: Now convert the little theory above into a theorem
;;; with defproperty
(defproperty treemin-<<-treemax
   ...)

;;; I did this one for you -- dilly dilly!  This verifies that
;;; the treemin of the tree that results from inserting a
;;; key/value pair to an original tree is either
;;;    1. The new key
;;;    2. The treemin of the original tree
;;; depending on whether the new key is <<= the old treemin
;;; or not
(defproperty-program treemin-of-insert
   (tree  :value (random-search-tree)
    key   :value (random-symbol)
    value :value (random-natural))
   (equal (tree-min (tree-insert key value tree))
          (if (or (equal tree nil)
                  (<< key (tree-min tree)))
              key
              (tree-min tree))))

;;; This function does absolutely nothing, so don't even try
;;; to understand what it returns.  (I don't even know myself.)
;;; Its only purpose in life is to define an induction scheme
;;; (e.g., a special version of noetheric induction) that is
;;; needed to prove the next two theorems.
(defun iih (key tree)
  (if (consp tree)
    (if (equal key (first tree))
      key
      (if (<< key (first tree))
        (iih key (third tree))
        (iih key (fourth tree))))
    nil))

;;; I did this one for you, too. Dilly dilly! This converts the
;;; previous theorem about the treemin after inserting into
;;; a binary search tree
(defproperty-logic treemin-of-insert
   (tree  :value (random-search-tree)
    key   :value (random-symbol)
    value :value (random-natural))
   (implies (and (search-treep tree)
                 (symbolp key)
                 (rationalp value))
            (equal (tree-min (tree-insert key value tree))
                   (if (or (not (consp tree))
                           (and (consp tree)
                                (<< key (tree-min tree))))
                       key
                       (tree-min tree))))
   :hints (("Goal" :induct (iih key tree))
           ("Subgoal *1/3"
           :use ((:instance <<-trichotomy
                            (x key)
                            (y (first tree)))
                 (:instance <<-trichotomy
                            (x key)
                            (y (tree-min (third tree))))
                 (:instance <<-trichotomy
                            (x key)
                            (y (tree-min (fourth tree)))))
           :in-theory (disable <<-trichotomy))
           ("Subgoal *1/2"
           :use ((:instance <<-trichotomy
                            (x key)
                            (y (first tree)))
                 (:instance <<-trichotomy
                            (x key)
                            (y (tree-min (third tree))))
                 (:instance <<-trichotomy
                            (x key)
                            (y (tree-min (fourth tree))))))))

;;; TODO: Now you can do the property about the treemax
;;; after inserting into a binary tree.  This is almost
;;; identical to treemin-of-insert above, so take a look
;;; at that property, make sure you understand it, then
;;; copy/paste below and modify it so it's about treemax
;;; instead of treemin
(defproperty-program treemax-of-insert
   (tree  :value (random-search-tree)
    key   :value (random-symbol)
    value :value (random-natural))
   (implies (and (search-treep tree)
                 (symbolp key)
                 (rationalp value))
            (equal (tree-max (tree-insert key value tree))
                   (if (or (not (consp tree))
                           (and (consp tree)
                                (>> key (tree-max tree))))
                       key
                       (tree-max tree))))
   :hints (("Goal" :induct (iih key tree))
           ("Subgoal *1/3"
           :use ((:instance >>-trichotomy
                            (x key)
                            (y (first tree)))
                 (:instance >>-trichotomy
                            (x key)
                            (y (tree-max (third tree))))
                 (:instance >>-trichotomy
                            (x key)
                            (y (tree-max (fourth tree)))))
           :in-theory (disable >>-trichotomy))
           ("Subgoal *1/2"
           :use ((:instance >>-trichotomy
                            (x key)
                            (y (first tree)))
                 (:instance >>-trichotomy
                            (x key)
                            (y (tree-max (third tree))))
                 (:instance >>-trichotomy
                            (x key)
                            (y (tree-max (fourth tree))))))))


;;; TODO: And now convert that little theory into a
;;; theorem. Again, start with treemin-of-insert, make
;;; sure you understand it, then copy/paste/modify below.
(defproperty-logic treemax-of-insert
  (tree  :value (random-search-tree)
    key   :value (random-symbol)
    value :value (random-natural))
   (implies (and (search-treep tree)
                 (symbolp key)
                 (natlp value))
            (equal (tree-max (tree-insert key value tree))
                   (if (or (not (consp tree))
                           (and (consp tree)
                                (>> key (tree-max tree))))
                       key
                       (tree-max tree))))
   :hints (("Goal" :induct (iih key tree))
           ("Subgoal *1/3"
           :use ((:instance >>-trichotomy
                            (x key)
                            (y (first tree)))
                 (:instance >>-trichotomy
                            (x key)
                            (y (tree-max (third tree))))
                 (:instance >>-trichotomy
                            (x key)
                            (y (tree-max (fourth tree)))))
           :in-theory (disable >>-trichotomy))
           ("Subgoal *1/2"
           :use ((:instance >>-trichotomy
                            (x key)
                            (y (first tree)))
                 (:instance >>-trichotomy
                            (x key)
                            (y (tree-max (third tree))))
                 (:instance >>-trichotomy
                            (x key)
                            (y (tree-max (fourth tree))))))))


;;; END OF CODE FROM SEARCH-TREE ASSIGNMENT

;;; Part 1: Decision trees:

;;; A decision tree is either
;;;
;;; * a symbol, e.g, 'versicolor
;;; * [ varname threshold left-tree right-tree ]

;;; Here is an example decision tree:
;;; Source: https://www.xoriant.com/blog/product-engineering/decision-trees-machine-learning-algorithm.html

(defconst *IRIS-DECISION-TREE*
  '(petal-length 245/100
    setosa
    (petal-width 175/100
      (petal-length 495/100
        (petal-width 165/100
          versicolor
          virginica)
        (petal-width 155/100
          virginica
          (sepal-length 695/100
            versicolor
            virginica)))
      (petal-length 485/100
        (sepal-length 595/100
          versicolor
          virginica)
        virginica))))
     

;;; TODO: Implement decision-treep
;;; This should return true if the object is a decision tree and false otherwise.
;;; Use the definition of decision tree given above.
;;; Hint: It should be very similar to search-treep from the previous assignment.

(defun decision-treep (tree)
(defun search-treep (tree)
   (if (consp tree)
             (if (equal (len tree) 4)
                (if (symbolp (first tree))
                   (if (rationalp(second tree))
                      (if (or (equal(third tree) nil)(<<(tree-max(third tree)) (first tree)))
                          (if (or (equal(fourth tree) nil)(<<(first tree) (tree-min (fourth tree))))
                        (if(and (search-treep (third tree))(search-treep(fourth tree)))
                                   t
                                nil)
                              nil)
                          nil)
                       nil)
                    nil)
                 nil)
       t))                 
(check-expect (decision-treep *IRIS-DECISION-TREE*) t)

;;; TODO: Implement decision
;;; This should evaluate a decision tree, using the description above:
;;; * if it's a symbol, then that's the value
;;; * otherwise, lookup the value of varname in the memory, and if it's 
;;;   less than or equal to the threshold, look for the value in the 
;;;   left-tree, and if it's greater than the threshold, look for the 
;;;   value in the right-tree

;;; Remember:
;;; A decision tree is either
;;;
;;; * a symbol, e.g, 'versicolor
;;; * [ varname threshold left-tree right-tree ]

(defun decision (tree memory)
  (decision-treep tree)
  (
  )

(check-expect (decision *IRIS-DECISION-TREE* 
                        (search-list-to-tree '((petal-length 2) 
                                               (petal-width 2)
                                               (sepal-length 5)))) 
              'setosa)
(check-expect (decision *IRIS-DECISION-TREE* 
                        (search-list-to-tree '((petal-length 5) 
                                               (petal-width 2)
                                               (sepal-length 5)))) 
              'virginica)

;;; Part 2: Now we're going to reason about decision trees

;;; TODO: Implement set-union
;;; We are going to reason about the conditions and decisions in
;;; a decision tree, so we'll get the conditions from the left-tree
;;; and right-tree and combine them. The right combination is
;;; "set union", but we don't have an implementation of that.  You
;;; can build one using these equations:
;;; * (union NIL L2) = L2
;;; * (union (cons a L1) L2) = (union L1 L2) if e is a member of L2
;;; * (union (cons a L1) L2) = (cons a (union L1 L2)) if e is NOT a member of L2

(defun set-union (l1 l2)
  (Union$ l1 l2)
  )
  
(check-expect (set-union '(a b c) '(d c b)) '(a d c b))

;;; TODO: Implement possible-decisions
;;; Now find the possible decisions that a decision tree can make.
;;; This is essentially the same as finding the list of leaves in
;;; a tree, but remember to use set-union to combine the leaves from
;;; the left and right subtrees
(defun possible-decisions (tree)
  (set-union (third tree) (fourth tree)
  
  )
(check-expect (possible-decisions *IRIS-DECISION-TREE*) '(setosa versicolor virginica))

;;; There is nothing to do in the following bit. It just defines the
;;; functions you will need to use defproperty on decision trees

(encapsulate nil
  (set-state-ok t)
  (defun random-decision-tree-of-length-fn (n state)
     (if (zp n)
         (random-symbol)
         (mv-let (n1 state)
                 (random-between 0 (- n 1))
            (let ((n2 (- n (+ n1 1))))
                 (mv-let (left state)
                         (random-decision-tree-of-length-fn n1 state)
                    (mv-let (right state)
                            (random-decision-tree-of-length-fn n2 state)
                       (mv-let (keylen state)
                               (random-data-size)
                          (mv-let (key state)
                                  (random-symbol-of-length-fn keylen state)
                             (mv-let (val state)
                                     (random-natural)
                                (mv (list key val left right) state))))))))))
  (defmacro random-decision-tree-of-length (n)
     `(random-decision-tree-of-length-fn ,n state))
  (defmacro random-decision-tree ()
     `(mv-let (ln state)
              (random-data-size)
         (random-decision-tree-of-length-fn ln state)))
 )

;;; TODO: Check the little theory that the decision
;;; made by a decision tree is always one of the tree's
;;; possible decisions
(defproperty-program decision-is-one-of-possible-decisions
  (tree   :value (random-decision-tree)
   memory :value (random-search-tree))
  ...)

;;; TODO: Now convert that little theory to a real
;;; theorem. (ACL2 proves mine automatically, so if
;;; yours doesn't, it probably means your definitions
;;; are too complicated.  Help ACL2 by writing simpler
;;; functions!)
(defproperty decision-is-one-of-possible-decisions
  ...)

;;; TODO: Implement possible-properties
;;; Now find the possible properties that a decision tree looks at.
;;; The properties are the things that it's checking against a
;;; threshold.
(defun possible-properties (tree)
  ...)
(check-expect (possible-properties *IRIS-DECISION-TREE*) '(petal-width petal-length sepal-length))

;;; TODO: Implement equiv-memories
;;; Two memories, m1 and m2, are equivalent if they have the 
;;; same values for all properties listed in props.
(defun equiv-memories (m1 m2 props)
  (if (consp props)
    (and (equal (tree-lookup (first props) m1)
                (tree-lookup (first props) m2))
         (equiv-memories m1 m2 (rest props)))
    t)
  )
(check-expect (equiv-memories (search-list-to-tree '((x 1) (y 2) (z 3)))
                              (search-list-to-tree '((x 1) (y 2) (z 4)))
                              '(x y))
              t)
(check-expect (equiv-memories (search-list-to-tree '((x 1) (y 2) (z 3)))
                              (search-list-to-tree '((x 1) (y 2) (z 4)))
                              '(x z))
              nil)

;;; TODO: Now test the little theories that if two memories
;;; are equivalent on the possible properties of a decision tree,
;;; then the tree will make the same decisions on both memories.
;;; E.g., if the decision is based only on height and weight, then
;;; two students with the same height and weight will be classified
;;; the same way
(defproperty-program equivalent-decisions
  (tree    :value (random-decision-tree)
   memory1 :value (random-search-tree)
   memory2 :value (random-search-tree))
  ...)

;;; TODO: Now TRY to convert that little theory to a real
;;; theorem. It's OK if you fail. I.e., ACL2 does not prove
;;; this property automatically with my definitions, and I
;;; doubt it'll work for yours, either. The proof is actually
;;; quite complicated, even though the idea seems trivial. That's
;;; not uncommon, I'm afraid. I'll be checking to make sure that
;;; your proposed theorem is reasonable, but it's fine if ACL2
;;; can't figure out how to prove it.
(defproperty equivalent-decisions
  ...)
